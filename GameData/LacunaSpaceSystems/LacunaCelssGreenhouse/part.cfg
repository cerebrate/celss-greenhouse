// Part Configuration - CELSS Greenhouse

// By: Alistair J. R. Young, May 2014

PART
{
    // General parameters
    name = CELSS Greenhouse
    module = Part
    author = Alistair J. R. Young
    
    // Asset parameters
    mesh = model.mu
    
    // Node definitions
    node_stack_top = 0.0, 1.61, 0.0, 0.0, 1.0, 0.0, 2
    node_stack_bottom = 0.0, -1.61, 0.0, 0.0, 1.0, 0.0, 2
    node_attach = 1.25, 0.0, 0.0, 1.0, 0.0, 0.0, 1

    // Editor parameters
    // Next line for beta-testing only - swap for line below for release
    TechRequired = electronics
    // TechRequired = advScienceTech
    
    cost = 3800
    category = Utility
    subcategory = 0
    title = CELSS Greenhouse
    manufacturer = Lacuna Space Systems, Inc.
    
    description = A greenhouse for a Closed Ecology Life Support System, which uses a living ecosystem to reprocess carbon dioxide into oxygen, purify waste water, and grow food on kerbals' bodily waste. Each greenhouse can support two kerbals' bodily needs indefinitely.
    
    // attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
    attachRules = 1,1,1,0,0
    
    // Standard part parameters
    mass = 7
    dragModelType = default
    maximum_drag = 0.2
    minimum_drag = 0.3
    angularDrag = 2
    crashTolerance = 6
    breakingForce = 200
    breakingTorque = 200
    maxTemp = 2900
    fuelCrossFeed = true
    
    // Make passable for kerbals - ConnectedLivingSpace
    MODULE
	{
		name = ModuleConnectedLivingSpace
		passable = true
	}
    
    // Animation
    MODULE
    {
        name = ModuleAnimateGeneric
        animationName = door
        startEventGUIName = Open Shutters
        endEventGUIName = Close Shutters
    }
    
    // Resource Converter
	MODULE
	{
		name = TacGenericConverter
		converterName = CELSS Greenhouse
        
        activateGUIName = Activate Greenhouse
        shutdownGUIName = Deactivate Greenhouse

		// Number of units to convert per day (24 hours)
		conversionRate = 2

		// A comma separated list of resources to use as inputs.
		// For each resource, list the resource name and the amount (which
		// is multiplied by the conversionRate)
		inputResources = CarbonDioxide, 1, WasteWater, 1, Waste, 1, ElectricCharge, 375

		// A comma separated list of resources to output. Same as above
		// but also specify whether it should keep converting if the
		// resource is full (generating excess that will be thrown away).
		outputResources = Oxygen, 1, true, Water, 1, true, Food, 1, true
	}
    
    // Resource stores
    RESOURCE
    {
        name = CarbonDioxide
        amount = 0
        maxAmount = 100
    }
    
    RESOURCE
    {
        name = WasteWater
        amount = 0
        maxAmount = 100
    }
    
    RESOURCE
    {
        name = Waste
        amount = 0
        maxAmount = 100
    }
    
    RESOURCE
    {
        name = Oxygen
        amount = 50
        maxAmount = 100
    }
    
    RESOURCE
    {
        name = Water
        amount = 50
        maxAmount = 100
    }
    
    RESOURCE
    {
        name = Food
        amount = 50
        maxAmount = 100
    }
}	